// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSPlotPixel
#pragma kernel CSPlotBar
#pragma kernel CSPlotFade

#pragma kernel CSPlotPixelArray1D
#pragma kernel CSPlotPixelArray2D

#pragma kernel CSFFT

// Create a RenderTexture with enableRandomWrite flag and set it with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> ResultFFT;
float4 Inputs[32]; // must be float4, can not be just array of float
float4 InputsPrev[32]; // must be float4, can not be just array of float
uint InputCount;
int WriteX;
int AmplitudeY;
int OffsetY;
float4 Color;
float4 Colors[1024];
int Invert;

[numthreads(32,16,1)]
void CSPlotPixel (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID)
{
    float val  = Inputs[id.x/4][id.x%4]; // "unpack" float4 array into float
    float val0 = InputsPrev[id.x/4][id.x%4]; // "unpack" float4 array into float

    int2 xy;
    xy.x = WriteX;
    xy.y = AmplitudeY * val + OffsetY * id.x - (val-val0) * gid.y;
    if (id.x < InputCount)
        Result[xy] = Color - (Invert>0?-1:1)*float4(id.xxxx%int4(11,7,9,1))*float4(0.1,0.3,0.2,0)*0.33; //float4((id.xxxx%int4(12,43,5,7)))*float4(0.1,0.2,0.3,0);
}

[numthreads(32,1,1)]
void CSPlotBar (uint3 id : SV_DispatchThreadID)
{
    uint2 xy = uint2(WriteX+id.y, id.x);
    Result[xy] = Color;
}

[numthreads(32,32,1)]
void CSPlotFade (uint3 id : SV_DispatchThreadID)
{
    uint2 xy = uint2((WriteX+id.y)%1024, id.x);
    if (Invert > 0)
        Result[xy] += pow((id.y)/1024.0, 0.8);
    else
        Result[xy] *= pow(id.y/32.0, 0.5);
}

[numthreads(32,1,1)]
void CSPlotPixelArray1D (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID)
{
    float4 col  = Colors[id.x];

    int2 xy;
    xy.x = WriteX;
    xy.y = id.x;
    if (id.x < InputCount)
        Result[xy] = col;
}

uint PixelArrayWidth;
[numthreads(32,16,1)]
void CSPlotPixelArray2D (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID)
{
    float4 col  = Colors[id.x];

    int2 xy;
    xy.x = id.x / PixelArrayWidth;
    xy.y = id.x % PixelArrayWidth;
    if (id.x < InputCount)
        Result[xy] = col;
}


float Time;
float DeltaTime;
float FreqStep;
float ReactivityFFT;
[numthreads(32,32,1)]
void CSFFT(uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID)
{
    float reComponent = 0;
    float imComponent = 0;
    for (int q = 0; q < 32; ++q)
    {
        uint2 xy = uint2((uint)(WriteX+q) % 32, id.x);
        float4 color = Result[xy];
        float val = color.x*2-1;//length(color.xyz);

        float t = Time + DeltaTime * q;
        reComponent += val * cos(t * FreqStep*id.y * 2 * 3.14);
        imComponent += val * sin(t * FreqStep*id.y * 2 * 3.14);        
    }

    int2 xy;
    xy.y = id.x;
    xy.x = id.y;
    float fftBand = sqrt(max(reComponent*reComponent + imComponent*imComponent, 0.01f));
    float4 fftBandColor = lerp(float4(0.2,0,0,1), float4(0.8, 0.6, 0.7, 1), fftBand);
    ResultFFT[xy] = lerp(ResultFFT[xy], fftBandColor, ReactivityFFT);
}
